#define _CRT_SECURE_NO_WARNINGS
#pragma warning (disable: 4700)

#include <iostream>
#include <string>
#include <ctime>
#include <fstream>
#include <sstream>
#include <algorithm>

using namespace std;

#define N 100

// Структура
struct Student {
	int group_number;
	string student_name;
	string student_surname;
	string student_patronymic;
	string direction;
	int date_day;
	int date_month;
	int date_year;
};

int i = 0; // Используется для подсчёта кол-ва студентов
string check; // Используется для проверки того, что введёт пользователь

string path = "file.txt"; // Путь к файлу сохранения данных

int Size(char a) {
	if (a == 'a' or a == 'A') { return 1; }
	else if (a == 'b' or a == 'B') { return 2; }
	else if (a == 'c' or a == 'C') { return 3; }
	else if (a == 'd' or a == 'D') { return 4; }
	else if (a == 'e' or a == 'E') { return 5; }
	else if (a == 'f' or a == 'F') { return 6; }
	else if (a == 'g' or a == 'G') { return 7; }
	else if (a == 'h' or a == 'H') { return 8; }
	else if (a == 'i' or a == 'I') { return 9; }
	else if (a == 'j' or a == 'J') { return 10; }
	else if (a == 'k' or a == 'K') { return 11; }
	else if (a == 'l' or a == 'L') { return 12; }
	else if (a == 'm' or a == 'M') { return 13; }
	else if (a == 'n' or a == 'N') { return 14; }
	else if (a == 'o' or a == 'O') { return 15; }
	else if (a == 'p' or a == 'P') { return 16; }
	else if (a == 'q' or a == 'Q') { return 17; }
	else if (a == 'r' or a == 'R') { return 18; }
	else if (a == 's' or a == 'S') { return 19; }
	else if (a == 't' or a == 'T') { return 20; }
	else if (a == 'u' or a == 'U') { return 21; }
	else if (a == 'v' or a == 'V') { return 22; }
	else if (a == 'w' or a == 'W') { return 23; }
	else if (a == 'x' or a == 'X') { return 24; }
	else if (a == 'y' or a == 'Y') { return 25; }
	else if (a == 'z' or a == 'Z') { return 26; }
}

void save(Student* student) {
	int k = 0;
	string msg;
	string tmp;
	fstream fs;
	fs.open(path, fstream::out);
	if (!fs.is_open()) {
		cout << "Ошибка чтения файла!" << endl;
	}
	else {
		while (!fs.eof()) {
			tmp = "";
			getline(fs, tmp);
			for (int j = 0; j < i; j++) {
				msg = to_string(student[j].group_number) + " " + student[j].student_name + " " + student[j].student_surname + " " + student[j].student_patronymic + " " + student[j].direction + " " + to_string(student[j].date_day) + " " + to_string(student[j].date_month) + " " + to_string(student[j].date_year);
				if (tmp == msg) { k++; }
			}
		}
		for (int j = k; j < i; j++) {
			ofstream fout;
			fout.open(path, ofstream::app);
			msg = to_string(student[j].group_number) + " " + student[j].student_name + " " + student[j].student_surname + " " + student[j].student_patronymic + " " + student[j].direction + " " + to_string(student[j].date_day) + " " + to_string(student[j].date_month) + " " + to_string(student[j].date_year);
			fout << msg << "\n";
			fout.close();
		}
	}
	fs.close();
	k = 0;
}

bool check_student(Student* student, string buffer_name, string buffer_surname, string buffer_patronymic) {
	for (int j = 0; j < i + 1; j++) {
		if ((string)buffer_name == (string)student[j].student_name) {
			if ((string)buffer_surname == (string)student[j].student_surname) {
				if ((string)buffer_patronymic == (string)student[j].student_patronymic) {
					return true;
				}
				else { return false; }
			}
			else { return false; }
		}
		else { return false; }
	}
}

int add_student(Student* student, int buffer_group_number, string buffer_name, string buffer_surname, string buffer_patronymic, string buffer_direction, int buffer_date_day, int buffer_date_month, int buffer_date_year) {

	bool saved = false;

	cout << "Вы окрыли раздел добавления информации о новом студенте. Для начала работы введите ключевое слово yes. Для возвращения к меню введите menu." << endl;

	cin >> check;  //  В переменную check передаётся то, что ввёл пользователь.
	cout << endl;

	if (check == "yes" or check == "YES" or check == "Yes") {
		cout << "==============================" << endl;
		cout << "Введите имя студента: "; cin >> buffer_name; cin.ignore();
		for (int j = 0; j < buffer_name.length(); j++) {
			if (!isalpha(buffer_name[j])) {
				cout << "Не допустимое значение!" << endl;
				return 1;
			}
		}
		cout << "Введите фамилию студента: "; cin >> buffer_surname; cin.ignore();
		for (int j = 0; j < buffer_surname.length(); j++) {
			if (!isalpha(buffer_surname[j])) {
				cout << "Не допустимое значение!" << endl << endl;
				return 1;
			}
		}
		cout << "Введите отчество студента: "; cin >> buffer_patronymic; cin.ignore();
		for (int j = 0; j < buffer_patronymic.length(); j++) {
			if (!isalpha(buffer_patronymic[j])) {
				cout << "Не допустимое значение!" << endl << endl;
				return 1;
			}
		}
		cout << "Введите день рождения студента(в формате д или дд): "; cin >> buffer_date_day; cin.ignore();
		for (int j = 0; j < to_string(buffer_date_day).length(); j++) {
			if (!isdigit(to_string(buffer_date_day)[j])) {
				cout << "Не допустимое значение!" << endl << endl;
				return 1;
			}
		}
		cout << "Введите месяц рождения студента(в формате д или дд): "; cin >> buffer_date_month; cin.ignore();
		for (int j = 0; j < to_string(buffer_date_month).length(); j++) {
			if (!isdigit(to_string(buffer_date_month)[j])) {
				cout << "Не допустимое значение!" << endl << endl;
				return 1;
			}
		}
		cout << "Введите год рождения студента(в формате д или дд): "; cin >> buffer_date_year; cin.ignore();
		for (int j = 0; j < to_string(buffer_date_year).length(); j++) {
			if (!isdigit(to_string(buffer_date_year)[j])) {
				cout << "Не допустимое значение!" << endl << endl;
				return 1;
			}
		}
		cout << "Введите направление подготовки: "; cin >> buffer_direction; cin.ignore();

		cout << "Введите номер группы: "; cin >> buffer_group_number; cin.ignore();
		for (int j = 0; j < to_string(buffer_group_number).length(); j++) {
			if (!isdigit(to_string(buffer_group_number)[j])) {
				cout << "Не допустимое значение!" << endl << endl;
				return 1;
			}
		}
		cout << "==============================" << endl << endl;

		if (check_student(student, buffer_name, buffer_surname, buffer_patronymic)) {
			cout << "Информация о данном студенте уже сущестует." << endl;
			cout << "Вы будете перенаправлены в меню" << endl << endl;
			saved = false;
			cin.clear();
			return 1;
		}
		else {
			student[i].group_number = buffer_group_number;
			student[i].date_day = buffer_date_day;
			student[i].date_month = buffer_date_month;
			student[i].date_year = buffer_date_year;
			student[i].student_name = buffer_name;
			student[i].student_surname = buffer_surname;
			student[i].student_patronymic = buffer_patronymic;
			student[i].direction = buffer_direction;
			i++;
			if (!saved) {
				save(student);
				saved = true;
			}
		}
	}
	else if (check == "menu" or check == "MENU" or check == "Menu") {
		saved = false;
		cin.clear();
		return 1;
	}
	else {
		cout << "Ключевое слово не найдено. Попробуйте снова..." << endl;
		saved = false;
		cin.clear();
		return 1;
	}
	saved = false;
	cin.clear();
}

void show_student(Student* student, int buffer_group_number, string buffer_name, string buffer_surname, string buffer_patronymic, string buffer_direction, int buffer_date_day, int buffer_date_month, int buffer_date_year) {
	int check_user = 0;  // Кол-во найденных пользователей.

	for (int j = 0; j < i; j++) {
		if ((string)buffer_name == (string)student[j].student_name) {
			if ((string)buffer_surname == (string)student[j].student_surname) {
				if ((string)buffer_patronymic == (string)student[j].student_patronymic) {
					check_user++;
					cout << "==============================" << endl;
					cout << "Имя: " << buffer_name << endl;
					cout << "Фамилия: " << buffer_surname << endl;
					cout << "Отчество: " << buffer_patronymic << endl;
					cout << "Направление подготовки: " << student[j].direction << endl;
					cout << "Номер группы: " << student[j].group_number << endl;
					cout << "Дата рождения: " << student[j].date_day << "." << student[j].date_month << "." << student[j].date_year << endl;
				}
			}
		}
	}

	if (check_user == 0) {
		cout << "Студент не найден." << endl;
	}
	cout << "==============================" << endl << endl;
	cin.clear();
}

void find_student_direction(Student* student, string direction) {
	int count = 0;
	for (int j = 0; j < i; j++) {
		if (student[j].direction == direction) {
			cout << "Имя: " << student[j].student_name << endl;
			cout << "Фамилия: " << student[j].student_surname << endl;
			cout << "Отчество: " << student[j].student_patronymic << endl;
			cout << "Направление подготовки: " << student[j].direction << endl;
			cout << "Номер группы: " << student[j].group_number << endl;
			cout << "Дата рождения: " << student[j].date_day << "." << student[j].date_month << "." << student[j].date_year << endl << endl;
			cout << "=======================================" << endl << endl;
			count++;
		}
	}
	if (count == 0) {
		cout << "Студентов по данному направлению не найдены!" << endl;
	}

	count = 0;
	cin.clear();
}

void find_student_group(Student* student, string direction, int group_number) {
	Student** buffer = new Student*[100];
	Student* temp = student;
	int count = 0;

	for (int j = 0; j < i; j++) {
		buffer[j] = &temp[j];
	}

	for (int j = 0; j < i; j++) {
		for (int k = 0; k < i - j - 1; k++) {
			if (Size(temp[k].student_surname[0]) > Size(temp[k + 1].student_surname[0])) {
				Student tmp = temp[k];
				temp[k] = temp[k + 1];
				temp[k + 1] = tmp;
			}
		}
	}

	for (int j = 0; j < i; j++) {
		if (temp[j].direction == direction) {
			if (temp[j].group_number == group_number) {
				cout << "Имя: " << temp[j].student_name << endl;
				cout << "Фамилия: " << temp[j].student_surname << endl;
				cout << "Отчество: " << temp[j].student_patronymic << endl;
				cout << "Направление подготовки: " << temp[j].direction << endl;
				cout << "Номер группы: " << temp[j].group_number << endl;
				cout << "Дата рождения: " << temp[j].date_day << "." << temp[j].date_month << "." << temp[j].date_year << endl << endl;
				cout << "=======================================" << endl << endl;
				count++;
			}
		}
	}
	if (count == 0) {
		cout << "Студенты данной группы не найдены!" << endl;
	}

	delete[] buffer;
	delete[] temp;
	count = 0;
	cin.clear();
}

void max_age(Student* student) {
	int max_day = student[0].date_day;
	int max_month = student[0].date_month;
	int max_year = student[0].date_year;
	int count = 0;
	int index = 0;

	for (int j = 0; j < i; j++) {
		if (student[j].date_year <= max_year) {
			max_year = student[j].date_year;
			if (student[j].date_month >= max_month) {
				max_month = student[j].date_month;
				if (student[j].date_day >= max_day) {
					max_day = student[j].date_day;
					index = j;
					count++;
				}
			}
		}
	}

	if (count == 0) {
		cout << "Список студентов пуст!" << endl;
	}
	else {
		cout << "Cтарший студент: " << endl;
		cout << "\tИмя: " << student[index].student_name << endl;
		cout << "\tФамилия: " << student[index].student_surname << endl;
		cout << "\tОтчество: " << student[index].student_patronymic << endl;
		cout << "\tНаправление подготовки: " << student[index].direction << endl;
		cout << "\tНомер группы: " << student[index].group_number << endl;
		cout << "\tДата рождения: " << student[index].date_day << "." << student[index].date_month << "." << student[index].date_year << endl;
	}
}

void min_age(Student* student) {
	int min_day = student[0].date_day;
	int min_month = student[0].date_month;
	int min_year = student[0].date_year;
	int count = 0;
	int index = 0;

	for (int j = 0; j < i; j++) {
		if (student[j].date_year >= min_year) {
			min_year = student[j].date_year;
			if (student[j].date_month <= min_month) {
				min_month = student[j].date_month;
				if (student[j].date_day <= min_day) {
					min_day = student[j].date_day;
					index = j;
					count++;
				}
			}
		}
	}

	if (count == 0) {
		cout << "Список студентов пуст!" << endl;
	}
	else {
		cout << "Младший студент: " << endl;
		cout << "\tИмя: " << student[index].student_name << endl;
		cout << "\tФамилия: " << student[index].student_surname << endl;
		cout << "\tОтчество: " << student[index].student_patronymic << endl;
		cout << "\tНаправление подготовки: " << student[index].direction << endl;
		cout << "\tНомер группы: " << student[index].group_number << endl;
		cout << "\tДата рождения: " << student[index].date_day << "." << student[index].date_month << "." << student[index].date_year << endl;
	}
}

void menu(Student* student) {
	int action;  // Номер, который введёт пользователь.
	string direction; // Напрвление подготовки для 3 и 4 функций
	int group; // Номер группы для 4 функции
	int buffer_group_number = 0;
	string buffer_name = "";
	string buffer_surname = "";
	string buffer_patronymic = "";
	string buffer_direction = "";
	int buffer_date_day = 0;
	int buffer_date_month = 0;
	int buffer_date_year = 0;
	string max_min;

	cout << "==============================" << endl;
	cout << "Доступные действия:" << endl;
	cout << "\t" << "1) Добавить информацию о новом студенте." << endl;
	cout << "\t" << "2) Распечатать информацию о счете в табличном виде." << endl;
	cout << "\t" << "3) Определить всех студентов по заданому направлению подготовки." << endl;
	cout << "\t" << "4) Определить всех студентов заданой группы." << endl;
	cout << "\t" << "5) Поиск старшего/младшего студента." << endl;
	cout << "\t" << "6) Выйти из программы." << endl;
	cout << "==============================" << endl;
	cout << "Введите цифру от 1 до 6: "; cin >> action;
	cout << "==============================" << endl << endl;

	if (action == 1) {
		if (add_student(student, buffer_group_number, buffer_name, buffer_surname, buffer_patronymic, buffer_direction, buffer_date_day, buffer_date_month, buffer_date_year) == 1) {
			menu(student);
		}
		menu(student);
	}
	else if (action == 2) {
		cout << "Введите имя, фамилию, отчество для вывода данных." << endl;
		cout << "\tИмя: "; cin >> buffer_name; cin.ignore();
		cout << "\tФамилию: "; cin >> buffer_surname; cin.ignore();
		cout << "\tОтчество: "; cin >> buffer_patronymic; cin.ignore();
		cout << endl;
		show_student(student, buffer_group_number, buffer_name, buffer_surname, buffer_patronymic, buffer_direction, buffer_date_day, buffer_date_month, buffer_date_year);
		menu(student);
	}
	else if (action == 3) {
		cout << "Введите напрвление, для поиска студента:" << endl;
		cout << "\tНаправление подготовки: "; cin >> direction; cin.ignore();
		find_student_direction(student, direction);
		menu(student);
	}
	else if (action == 4) {
		cout << "Введите напрвление подготовки и номер группы для поиска студента:" << endl;
		cout << "\tНаправление подготовки: "; cin >> direction; cin.ignore();
		cout << "\tНомер группы: "; cin >> group; cin.ignore(); cout << endl;
		find_student_group(student, direction, group);
		menu(student);
	}
	else if (action == 5) {
		cout << "Введите max, если хотите найти старшего студента, введите min, если хотите найти младшего студента: " << endl;
		cin >> max_min;
		if (max_min == "max" or max_min == "Max" or max_min == "MAX") {
			max_age(student);
			menu(student);
		}
		if (max_min == "min" or max_min == "Min" or max_min == "MIN") {
			min_age(student);
			menu(student);
		}
		else {
			cout << "Некорректное значение!" << endl;
			menu(student);
		}
	}
	else if (action == 6) {
		cout << "Завершение программы..." << endl;
		exit(0);
	}
	else {
		cin.clear();
		cin.ignore(numeric_limits<streamsize>::max(), '\n');
		cout << "Действие не найдено. Введите корректное значение..." << endl;
		menu(student);
	}
}

int main() {
	setlocale(LC_ALL, "Rus");

	// Кол-во строк в загруженном файле
	ifstream in(path);
	string s;
	while (in.peek() != EOF) {
		getline(in, s);
		i++;
	}

	int err_year = 0;

	Student* student = new Student[N];  //  Основной массив, содержащий всех студентов.

	int line_count = 0;
	string buffer; // буфер для строк из файла
	string tmp;
	int pos = 0;

	ifstream ff;
	ff.open(path);
	for (int j = 0; j < i; j++) {
		tmp = "";
		getline(ff, buffer);
		for (int k = 0; k < buffer.length(); k++) {
			if (!isspace(buffer[k])) {
				tmp += buffer[k];
				if (pos == 7) {
					istringstream iss(tmp, istringstream::in);
					iss >> student[j].date_year;
					err_year++;
					if (err_year == 2) {
						pos = 0;
						tmp = "";
						err_year = 0;
					}
				}
			}
			else {
				if (pos == 0) {
					istringstream iss(tmp, istringstream::in);
					iss >> student[j].group_number;
					pos++;
					tmp = "";
				}
				else if (pos == 1) {
					student[j].student_name = tmp;
					pos++;
					tmp = "";
				}
				else if (pos == 2) {
					student[j].student_surname = tmp;
					pos++;
					tmp = "";
				}
				else if (pos == 3) {
					student[j].student_patronymic = tmp;
					pos++;
					tmp = "";
				}
				else if (pos == 4) {
					student[j].direction = tmp;
					pos++;
					tmp = "";
				}
				else if (pos == 5) {
					istringstream iss(tmp, istringstream::in);
					iss >> student[j].date_day;
					pos++;
					tmp = "";
				}
				else if (pos == 6) {
					istringstream iss(tmp, istringstream::in);
					iss >> student[j].date_month;
					pos++;
					tmp = "";
				}
			}
		}
	}

	ff.close();

	cout << endl << "Добро пожаловать в программу - ВУЗ." << endl << endl;

	menu(student);

	delete[] student;

	return 0;
}
